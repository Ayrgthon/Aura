#!/usr/bin/env python3
"""
Ejemplo de uso de MCPs (Model Context Protocol) con Aura

Este script demuestra c√≥mo:
1. Configurar servidores MCP
2. Usar herramientas de filesystem
3. Crear configuraciones personalizadas
"""

import os
import asyncio
import sys
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from client import GeminiClient

async def test_filesystem_mcp():
    """Probar el servidor MCP de filesystem"""
    print("üß™ === PRUEBA DE FILESYSTEM MCP ===\n")
    
    # Crear cliente
    client = GeminiClient()
    
    # Configurar MCP con filesystem
    home_dir = os.path.expanduser("~")
    mcp_config = {
        "filesystem": {
            "command": "npx",
            "args": [
                "-y",
                "@modelcontextprotocol/server-filesystem",
                home_dir,           # Directorio home
                f"{home_dir}/Documents",  # Documentos
                f"{home_dir}/Desktop",    # Escritorio
            ],
            "transport": "stdio"
        }
    }
    
    # Intentar configurar MCP
    success = await client.setup_mcp_servers(mcp_config)
    
    if not success:
        print("‚ùå No se pudo configurar MCP. Verifica que Node.js est√© instalado:")
        print("   sudo apt update && sudo apt install nodejs npm")
        print("   # o")
        print("   brew install node")
        return
    
    print(f"‚úÖ MCP configurado. Herramientas disponibles: {len(client.mcp_tools)}")
    
    # Ejemplos de comandos para probar
    test_commands = [
        "Lista los archivos en mi escritorio",
        "¬øQu√© archivos hay en mi directorio Documents?",
        "Crea un archivo llamado 'test_mcp.txt' en mi escritorio con el contenido 'Hola desde MCP!'",
        "Lee el contenido del archivo test_mcp.txt en mi escritorio",
        "Busca archivos que contengan la palabra 'test' en el nombre",
    ]
    
    print("\nüéØ Comandos de ejemplo que puedes probar:")
    for i, cmd in enumerate(test_commands, 1):
        print(f"   {i}. {cmd}")
    
    print("\nüí¨ Prueba interactiva:")
    while True:
        try:
            user_input = input("\nüë§ Comando: ").strip()
            
            if user_input.lower() in ['quit', 'exit', 'salir']:
                break
            
            if not user_input:
                continue
            
            print("ü§ñ Respuesta: ", end="", flush=True)
            response = await client.chat_with_voice(user_input)
            
        except KeyboardInterrupt:
            print("\nüëã ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"\n‚ùå Error: {e}")

async def test_custom_mcp_config():
    """Ejemplo de configuraci√≥n MCP personalizada"""
    print("üîß === CONFIGURACI√ìN MCP PERSONALIZADA ===\n")
    
    # Configuraci√≥n para m√∫ltiples servidores MCP
    custom_config = {
        "filesystem": {
            "command": "npx",
            "args": [
                "-y", 
                "@modelcontextprotocol/server-filesystem",
                "/tmp",  # Solo acceso a /tmp por seguridad
            ],
            "transport": "stdio"
        },
        # Puedes agregar m√°s servidores aqu√≠
        # "weather": {
        #     "command": "python",
        #     "args": ["path/to/weather_server.py"],
        #     "transport": "stdio"
        # }
    }
    
    client = GeminiClient()
    success = await client.setup_mcp_servers(custom_config)
    
    if success:
        print("‚úÖ Configuraci√≥n personalizada exitosa")
        print(f"üîß {len(client.mcp_tools)} herramientas cargadas")
    else:
        print("‚ùå Error en configuraci√≥n personalizada")

def show_mcp_info():
    """Mostrar informaci√≥n sobre MCPs"""
    print("üìö === INFORMACI√ìN SOBRE MCP ===\n")
    
    print("üîç ¬øQu√© es MCP?")
    print("   Model Context Protocol es un protocolo abierto que permite")
    print("   a las aplicaciones LLM conectarse con fuentes de datos externas")
    print("   y herramientas de manera estandarizada.\n")
    
    print("üõ†Ô∏è  Herramientas disponibles en Filesystem MCP:")
    print("   ‚Ä¢ read_file - Leer contenido de archivos")
    print("   ‚Ä¢ write_file - Escribir/crear archivos")
    print("   ‚Ä¢ list_directory - Listar contenido de directorios")
    print("   ‚Ä¢ search_files - Buscar archivos por nombre")
    print("   ‚Ä¢ get_file_info - Obtener metadatos de archivos")
    print("   ‚Ä¢ create_directory - Crear directorios")
    print("   ‚Ä¢ move_file - Mover/renombrar archivos")
    print("   ‚Ä¢ edit_file - Editar archivos existentes\n")
    
    print("üìã Requisitos:")
    print("   ‚Ä¢ Node.js y npm instalados")
    print("   ‚Ä¢ Paquete @modelcontextprotocol/server-filesystem")
    print("   ‚Ä¢ langchain-mcp-adapters en Python\n")
    
    print("üîí Seguridad:")
    print("   ‚Ä¢ MCPs solo pueden acceder a directorios especificados")
    print("   ‚Ä¢ Validaci√≥n de rutas para prevenir ataques")
    print("   ‚Ä¢ Sandboxing por dise√±o\n")

async def main():
    """Funci√≥n principal del ejemplo"""
    print("üåü === EJEMPLOS DE MCP CON AURA ===\n")
    
    while True:
        print("Selecciona una opci√≥n:")
        print("1. Probar Filesystem MCP")
        print("2. Configuraci√≥n MCP personalizada")
        print("3. Informaci√≥n sobre MCP")
        print("4. Salir")
        
        choice = input("\nOpci√≥n (1-4): ").strip()
        
        if choice == "1":
            await test_filesystem_mcp()
        elif choice == "2":
            await test_custom_mcp_config()
        elif choice == "3":
            show_mcp_info()
        elif choice == "4":
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida")
        
        input("\nPresiona Enter para continuar...")
        print("\n" + "="*50 + "\n")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã ¬°Programa terminado!")
    except Exception as e:
        print(f"‚ùå Error: {e}") 